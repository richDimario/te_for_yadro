#include <iostream>
#include <complex>
#include <vector>
#include <cmath>

using namespace std;

const double PI = 3.14159265;

void fft(vector<complex<double>>& a) {
    int n = a.size();
    if (n <= 1) return;

    vector<complex<double>> even(n / 2);
    vector<complex<double>> odd(n / 2);

    for (int i = 0; i < n / 2; ++i) {
        even[i] = a[i * 2];
        odd[i] = a[i * 2 + 1];
    }

    fft(even);
    fft(odd);

    for (int i = 0; i < n / 2; ++i) {
        complex<double> t = polar(1.0, -2 * PI * i / n) * odd[i];
        a[i] = even[i] + t;
        a[i + n / 2] = even[i] - t;
    }
}

void ifft(vector<complex<double>>& a) {
    for (auto& x : a) {
        x = conj(x);
    }

    fft(a);

    for (auto& x : a) {
        x = conj(x);
    }

    for (auto& x : a) {
        x /= a.size();
    }
}

int main() {
    vector<complex<double>> data = {1, 2, 3, 4, 5, 6, 7, 8};
    
    cout << "Входные данные:\n";
    for (const auto& val : data) {
        cout << val << "\n";
    }

    fft(data);
    
    cout << "\nПрямое преобразование:\n";
    for (const auto& val : data) {
        cout << val << "\n";
    }

    ifft(data);

    cout << "\nОбратное преобразование:\n";
    for (const auto& val : data) {
        cout << val << "\n";
    }

    return 0;
}
